// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get($columns, $numberColumns) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

/**
 * Mixin transition cross browser
 */
@mixin anim-transition ($property, $seconds, $ease, $delay) {
    -webkit-transition: $property $seconds $ease $delay;
    -moz-transition: $property $seconds $ease $delay;
    -o-transition: $property $seconds $ease $delay;
    transition: $property $seconds $ease $delay;
}
// Include: @include anim-transition($property $seconds $ease $delay);
// Ej: @include anim-transition(height 400ms cubic-bezier(0.31, 0.51, 0.01, 1.07) );



/**
 * Button Reset
 */
@mixin button-reset() {
	background: transparent;
	border: 0 none;
	border-radius: 0;
	box-shadow: none;
	padding: 0;
	outline: none;
	cursor: pointer;
}



/**
 * Brand Color - move this -HL
 *
 */
@function brand-color( $key, $variant: null ) {
	@if map-has-key( $brand_colors, $key ) {
		$color: map-get( $brand_colors, $key );
		@if ( 'lighten' == $variant ) {
			$lighten_key: $key + '_lighten';
			@if map-has-key( $brand_colors, $lighten_key ) {
				$color: #{map-get( $brand_colors, $lighten_key )};
			} @else {
				$color: lighten( $color, 10% );
			}
		}
		@else if( 'darken' == $variant ) {
			$darken_key: $key + '_darken';
			@if map-has-key( $brand_colors, $darken_key ) {
				$color: #{map-get( $brand_colors, $darken_key )};
			} @else {
				$color: darken( $color, 10% );
			}
		}
		@return $color;
	} @else {
		@error "The #{$key} color could not be found in $brand_colors";
	}
}

/**
 * CSS-Grid Columns, with float fallback (https://www.billerickson.net/css-grid-ie-fallback/)
 *
 */
 
@mixin columns( $columns, $wrapper_width: null, $grid_item_element: article ) {

	@if( $wrapper_width == null ) {
		$wrapper_width: $grid-max-width;
	}

	#{$grid_item_element} {
		float: left;
		margin-left: $grid-gutter / $wrapper_width * 100%;
		width: ( ( $wrapper_width - $grid-gutter * ( $columns - 1 ) ) / $columns ) / $wrapper_width * 100%;

		&:nth-of-type(#{$columns}n+1) {
			clear: both;
			margin-left: 0;
		}
	}

	@supports( grid-area: auto ) {
		display: grid;
		grid-column-gap: $grid-gutter;
		grid-template-columns: repeat( $columns, 1fr );

		#{$grid_item_element} {
			margin-left: 0;
			width: 100%;
		}

		header, nav, aside, footer {
			grid-column: 1 / -1;
		}
	}
}

/**
 * Columns, Mobile
 *
 */
@mixin columns-mobile( $columns, $wrapper_width: null, $grid_item_element: article ) {

	@include media("<tablet") {
		@include columns( $columns, $wrapper_width, $grid_item_element );
	}
}

/**
 * Columns, Tablet
 *
 */
@mixin columns-tablet( $columns, $wrapper_width: null, $grid_item_element: article ) {

	@include media(">=tablet", "<medium") {
		@include columns( $columns, $wrapper_width, $grid_item_element );
	}

}

/**
 * Columns, Tablet Up
 *
 */
@mixin columns-tablet-up( $columns, $wrapper_width: null, $grid_item_element: article ) {

	@include media(">=tablet") {
		@include columns( $columns, $wrapper_width, $grid_item_element );
	}

}

/**
 * Columns, Desktop
 *
 */
@mixin columns-desktop( $columns, $wrapper_width: null, $grid_item_element: article ) {
	@include media(">=medium") {
		@include columns( $columns, $wrapper_width, $grid_item_element );
	}
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

